version: 2

jobs:
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  build:
    docker:
      - image: circleci/node:9-stretch-browsers

    working_directory: ~/
    steps:
      - run:
          name: Do Nothing
          command: ls -la
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  make_timelapse:
    docker:
      - image: circleci/python:3.7.3

    working_directory: ~/
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get upgrade -y
            sudo apt-get install -y zip wget iputils-ping curl jq build-essential libssl-dev python python-pip python3 python3-pip file libgcrypt-dev git sudo build-essential libssl-dev awscli vim ffmpeg sqlite3
            pip3 install awscli --upgrade --user
      - run:
          name: Make Timelapse
          no_output_timeout: 60m
          command: |
            echo 'export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"' >> $BASH_ENV
            echo 'export CIRCLE_TOKEN="$CIRCLE_TOKEN"' >> $BASH_ENV
            echo 'export GITHUB_TOKEN="$GITHUB_TOKEN"' >> $BASH_ENV
            echo 'export GITHUB_USER="$GITHUB_USER"' >> $BASH_ENV
            echo 'export NPM_TOKEN="$NPM_TOKEN"' >> $BASH_ENV
            echo 'export SLACK_TOKEN="$SLACK_TOKEN"' >> $BASH_ENV
            git clone https://$GITHUB_TOKEN@github.com/mathew-fleisch/timelapse-pipeline.git
            cd timelapse-pipeline
            TARGET_DIR=$(pwd)
            mkdir -p files
            cd scripts/processor
            if ! [ -f "start.sh" ]; then
              echo "Missing start.sh script"
              exit 1
            fi
            if [ -z "$TARGET_DIR" ]; then
              echo "Missing target directory (location for downloaded images, video and audio files)."
              exit 1
            fi
            if [ -z "$TARGET_DATE" ]; then
              echo "Missing target date."
              exit 1
            fi
            if [ -z "$TARGET_BASE" ]; then
              echo "Missing target s3 bucket+path of where the processed videos will be stored."
              exit 1
            fi
            if [ -z "$SLACK_TOKEN" ]; then
              echo "Missing slack token for callbacks."
              exit 1
            fi
            if [ -z "$TRIGGERED_CHANNEL_ID" ]; then
              echo "Missing slack channel id for callbacks."
              exit 1
            fi
            if [ -z "$TRIGGERED_USER_ID" ]; then
              echo "Missing slack user id for callbacks."
              exit 1
            fi
            if [ -z "$OVERWRITE_EXISTING" ]; then
              OVERWRITE_EXISTING=0
            fi
            if [ -z "$EXISTING_AUDIO" ]; then
              EXISTING_AUDIO=""
            fi
            echo "Make Timelapse..."
            echo "TARGET_DATE=$TARGET_DATE"
            echo "TARGET_DIR=$TARGET_DIR"
            echo "TARGET_BASE=$TARGET_BASE"
            echo "SOURCE_NAME=$SOURCE_NAME"
            echo "SOURCE_BASE=$SOURCE_BASE"
            echo "EXISTING_AUDIO=$EXISTING_AUDIO"
            echo "TRIGGERED_CHANNEL_ID=$TRIGGERED_CHANNEL_ID"
            echo "TRIGGERED_USER_ID=$TRIGGERED_USER_ID"
            if [ -z "$EXISTING_AUDIO" ]; then
              echo "Grab random audio file"
              ./start.sh --name ${SOURCE_NAME} --target-date ${TARGET_DATE} --source-base ${SOURCE_BASE} --target-dir ${TARGET_DIR}/files --remove-night 1 --target-base ${TARGET_BASE} --sqlite-db timelapse.db --slack-token ${SLACK_TOKEN} --slack-channel ${TRIGGERED_CHANNEL_ID} --slack-user ${TRIGGERED_USER_ID}
            else
              echo "Grab existing audio file: ${EXISTING_AUDIO}.mp3"
              ./start.sh --name ${SOURCE_NAME} --target-date ${TARGET_DATE} --source-base ${SOURCE_BASE} --target-dir ${TARGET_DIR}/files --remove-night 1 --existing-audio ${EXISTING_AUDIO} --target-base ${TARGET_BASE} --sqlite-db timelapse.db --slack-token ${SLACK_TOKEN} --slack-channel ${TRIGGERED_CHANNEL_ID} --slack-user ${TRIGGERED_USER_ID}
            fi
            echo "Timelapse complete."


  make_timelapse_legacy:
    docker:
      - image: circleci/python:3.7.3

    working_directory: ~/
    steps:
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get upgrade -y
            sudo apt-get install -y zip wget iputils-ping curl jq build-essential libssl-dev python python-pip python3 python3-pip file libgcrypt-dev git sudo build-essential libssl-dev awscli vim ffmpeg sqlite3
            pip3 install awscli --upgrade --user
      - run:
          name: Make Timelapse
          no_output_timeout: 60m
          command: |
            echo 'export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"' >> $BASH_ENV
            echo 'export CIRCLE_TOKEN="$CIRCLE_TOKEN"' >> $BASH_ENV
            echo 'export GITHUB_TOKEN="$GITHUB_TOKEN"' >> $BASH_ENV
            echo 'export GITHUB_USER="$GITHUB_USER"' >> $BASH_ENV
            echo 'export NPM_TOKEN="$NPM_TOKEN"' >> $BASH_ENV
            echo 'export SLACK_TOKEN="$SLACK_TOKEN"' >> $BASH_ENV
            git clone https://$GITHUB_TOKEN@github.com/mathew-fleisch/timelapse-pipeline.git
            cd timelapse-pipeline
            TARGET_DIR=$(pwd)
            mkdir -p files
            cd scripts/processor
            if ! [ -f "start.sh" ]; then
              echo "Missing start.sh script"
              exit 1
            fi
            echo "Make Timelapse (Callback)..."
            echo "TARGET_DATE=$TARGET_DATE"
            echo "SOURCE_NAME=$SOURCE_NAME"
            echo "SOURCE_BASE=$SOURCE_BASE"
            if [ -z "$EXISTING_AUDIO" ]; then
              if ! [ -z "$TRIGGERED_CHANNEL_ID" ]; then
                echo "Slack Callback: $TRIGGERED_CHANNEL_ID"
                if ! [ -z "$SLACK_TOKEN" ]; then
                  if ! [ -z "$TRIGGERED_USER_ID" ]; then
                    ./start.sh --name ${SOURCE_NAME} --target-date ${TARGET_DATE} --source-base ${SOURCE_BASE} --target-dir ${TARGET_DIR}/files --remove-night 1 --target-base s3://eaze-timelapse/pipeline --sqlite-db timelapse.db --slack-token ${SLACK_TOKEN} --slack-channel ${TRIGGERED_CHANNEL_ID} --slack-user ${TRIGGERED_USER_ID}
                    exit 0
                  fi
                fi
              fi
              ./start.sh --name ${SOURCE_NAME} --target-date ${TARGET_DATE} --source-base ${SOURCE_BASE} --target-dir ${TARGET_DIR}/files --remove-night 1 --target-base s3://eaze-timelapse/pipeline --sqlite-db timelapse.db
            else
              if ! [ -z "$TRIGGERED_CHANNEL_ID" ]; then
                echo "Slack Callback: $TRIGGERED_CHANNEL_ID"
                if ! [ -z "$SLACK_TOKEN" ]; then
                  if ! [ -z "$TRIGGERED_USER_ID" ]; then
                    ./start.sh --name ${SOURCE_NAME} --target-date ${TARGET_DATE} --source-base ${SOURCE_BASE} --target-dir ${TARGET_DIR}/files --remove-night 1 --existing-audio ${EXISTING_AUDIO} --target-base s3://eaze-timelapse/pipeline --sqlite-db timelapse.db --slack-token ${SLACK_TOKEN} --slack-channel ${TRIGGERED_CHANNEL_ID} --slack-user ${TRIGGERED_USER_ID}
                    exit 0
                  fi
                fi
              fi
              ./start.sh --name ${SOURCE_NAME} --target-date ${TARGET_DATE} --source-base ${SOURCE_BASE} --target-dir ${TARGET_DIR}/files --remove-night 1 --existing-audio ${EXISTING_AUDIO} --target-base s3://eaze-timelapse/pipeline --sqlite-db timelapse.db
            fi
            echo "Timelapse complete."


# WORKFLOW - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
workflows:
  version: 2
  ad-hoc-build-processes:
    jobs:
      - build:
          filters:
            branches:
              only: never-build-this-automatically
      - make_timelapse:
          context: timelapse
          filters:
            branches:
              only: never-build-this-automatically
